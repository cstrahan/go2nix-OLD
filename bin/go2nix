#!/usr/bin/env ruby

require 'go2nix'
require 'json'
require 'fileutils'

opts = Go2nix::OptParser.parse(ARGV)

if opts.til == :auto && opts.revision != nil
  date = Go2nix::Go::Package.date_of_revision(opts.package, opts.revision)
  one_second = Rational(1, 60 * 60 * 24)
  opts.til = date + one_second # round up to account for lack of precision

  puts "Fetching sources up to #{opts.til} (from revision #{opts.revision})."
elsif opts.til
  puts "Fetching sources up to #{opts.til}."
else
  puts "Fetching latest sources."
end

if opts.in_json
  json = File.open(opts.in_json, &:read)
  json = JSON.parse(json, :symbolize_names => true)
  revs = json.map {|j| Go2nix::Revision.new(j)}
else
  gopath = Dir.mktmpdir
  revs = Go2nix.snapshot(gopath, opts.tags, opts.til, [opts.package])
end
revs = revs.sort_by { |rev| rev.root }

if opts.out_json
  File.open(opts.out_json, "w") do |f|
    json = revs.map(&:as_json)
    json = JSON.pretty_generate(json)
    f.write(json)
  end
end

if opts.out_nix
  File.open(opts.out_nix, "w") do |f|
    nix = Go2nix.render_nix(revs)
    f.write(nix)
  end
end
